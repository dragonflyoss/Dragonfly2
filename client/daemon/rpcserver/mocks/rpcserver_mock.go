// Code generated by MockGen. DO NOT EDIT.
// Source: rpcserver.go
//
// Generated by this command:
//
//	mockgen -destination mocks/rpcserver_mock.go -source rpcserver.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	net "net"
	reflect "reflect"
	time "time"

	dfdaemon "d7y.io/api/v2/pkg/apis/dfdaemon/v1"
	config "d7y.io/dragonfly/v2/client/config"
	gomock "go.uber.org/mock/gomock"
)

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
	isgomock struct{}
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// Alive mocks base method.
func (m *MockServer) Alive(alive time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alive", alive)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Alive indicates an expected call of Alive.
func (mr *MockServerMockRecorder) Alive(alive any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alive", reflect.TypeOf((*MockServer)(nil).Alive), alive)
}

// Keep mocks base method.
func (m *MockServer) Keep() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Keep")
}

// Keep indicates an expected call of Keep.
func (mr *MockServerMockRecorder) Keep() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keep", reflect.TypeOf((*MockServer)(nil).Keep))
}

// OnNotify mocks base method.
func (m *MockServer) OnNotify(arg0 *config.DynconfigData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnNotify", arg0)
}

// OnNotify indicates an expected call of OnNotify.
func (mr *MockServerMockRecorder) OnNotify(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNotify", reflect.TypeOf((*MockServer)(nil).OnNotify), arg0)
}

// ServeDownload mocks base method.
func (m *MockServer) ServeDownload(listener net.Listener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServeDownload", listener)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServeDownload indicates an expected call of ServeDownload.
func (mr *MockServerMockRecorder) ServeDownload(listener any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeDownload", reflect.TypeOf((*MockServer)(nil).ServeDownload), listener)
}

// ServePeer mocks base method.
func (m *MockServer) ServePeer(listener net.Listener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServePeer", listener)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServePeer indicates an expected call of ServePeer.
func (mr *MockServerMockRecorder) ServePeer(listener any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServePeer", reflect.TypeOf((*MockServer)(nil).ServePeer), listener)
}

// Stop mocks base method.
func (m *MockServer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockServer)(nil).Stop))
}

// MockResultSender is a mock of ResultSender interface.
type MockResultSender struct {
	ctrl     *gomock.Controller
	recorder *MockResultSenderMockRecorder
	isgomock struct{}
}

// MockResultSenderMockRecorder is the mock recorder for MockResultSender.
type MockResultSenderMockRecorder struct {
	mock *MockResultSender
}

// NewMockResultSender creates a new mock instance.
func NewMockResultSender(ctrl *gomock.Controller) *MockResultSender {
	mock := &MockResultSender{ctrl: ctrl}
	mock.recorder = &MockResultSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultSender) EXPECT() *MockResultSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockResultSender) Send(arg0 *dfdaemon.DownResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockResultSenderMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockResultSender)(nil).Send), arg0)
}
