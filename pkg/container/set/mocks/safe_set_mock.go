// Code generated by MockGen. DO NOT EDIT.
// Source: safe_set.go
//
// Generated by this command:
//
//	mockgen -destination mocks/safe_set_mock.go -source safe_set.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSafeSet is a mock of SafeSet interface.
type MockSafeSet[T comparable] struct {
	ctrl     *gomock.Controller
	recorder *MockSafeSetMockRecorder[T]
	isgomock struct{}
}

// MockSafeSetMockRecorder is the mock recorder for MockSafeSet.
type MockSafeSetMockRecorder[T comparable] struct {
	mock *MockSafeSet[T]
}

// NewMockSafeSet creates a new mock instance.
func NewMockSafeSet[T comparable](ctrl *gomock.Controller) *MockSafeSet[T] {
	mock := &MockSafeSet[T]{ctrl: ctrl}
	mock.recorder = &MockSafeSetMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSafeSet[T]) EXPECT() *MockSafeSetMockRecorder[T] {
	return m.recorder
}

// Add mocks base method.
func (m *MockSafeSet[T]) Add(arg0 T) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockSafeSetMockRecorder[T]) Add(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSafeSet[T])(nil).Add), arg0)
}

// Clear mocks base method.
func (m *MockSafeSet[T]) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockSafeSetMockRecorder[T]) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockSafeSet[T])(nil).Clear))
}

// Contains mocks base method.
func (m *MockSafeSet[T]) Contains(arg0 ...T) bool {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Contains", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains.
func (mr *MockSafeSetMockRecorder[T]) Contains(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockSafeSet[T])(nil).Contains), arg0...)
}

// Delete mocks base method.
func (m *MockSafeSet[T]) Delete(arg0 T) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", arg0)
}

// Delete indicates an expected call of Delete.
func (mr *MockSafeSetMockRecorder[T]) Delete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSafeSet[T])(nil).Delete), arg0)
}

// Len mocks base method.
func (m *MockSafeSet[T]) Len() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(uint)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockSafeSetMockRecorder[T]) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockSafeSet[T])(nil).Len))
}

// Values mocks base method.
func (m *MockSafeSet[T]) Values() []T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Values")
	ret0, _ := ret[0].([]T)
	return ret0
}

// Values indicates an expected call of Values.
func (mr *MockSafeSetMockRecorder[T]) Values() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Values", reflect.TypeOf((*MockSafeSet[T])(nil).Values))
}
